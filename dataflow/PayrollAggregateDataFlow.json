{
	"name": "PayrollAggregateDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PayrollDataSynapse",
						"type": "DatasetReference"
					},
					"name": "Payroll2021SynapseSource"
				},
				{
					"dataset": {
						"referenceName": "nycpayrollHistoricalcsv",
						"type": "DatasetReference"
					},
					"name": "PayrollHistoricalCSVSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PayrollSummarySynapse",
						"type": "DatasetReference"
					},
					"name": "AggregatedPayrollSink"
				}
			],
			"transformations": [
				{
					"name": "PayrollUnion"
				},
				{
					"name": "TotalPaid"
				},
				{
					"name": "SumTotalPaidByAgencyAndFiscalYear"
				},
				{
					"name": "FilterByFiscalYear"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2021)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> Payroll2021SynapseSource",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PayrollHistoricalCSVSource",
				"Payroll2021SynapseSource, PayrollHistoricalCSVSource union(byName: true)~> PayrollUnion",
				"FilterByFiscalYear derive(TotalPaid = TotalOtherPay + TotalOTPaid + RegularGrossPaid) ~> TotalPaid",
				"TotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> SumTotalPaidByAgencyAndFiscalYear",
				"PayrollUnion filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> FilterByFiscalYear",
				"SumTotalPaidByAgencyAndFiscalYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AggregatedPayrollSink"
			]
		}
	}
}